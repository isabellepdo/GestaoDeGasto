c
csv_file
c
row['cpf']
row['cpf'
row
linha
c
csv = CSV.parse(csv_file, headers: true)
csv_file
c
linha[1]
linha[0]
linha = row[0].split('\;')
row[0]
row[:cpf]
row
linha = row[0]
linha = row[0].class
linha = row[0]
linha = row[0].tr("\;" ,",")
linha = row[0].tr(";" ,",")
linha = row[0].split("\;")
linha = row[0].split(";")
linha = row[0].split(';')
linha = row[0].split('\;')
linha
c
linha = row[0].split('\;')
row[0]
linha
linha = linha.split('\;')
linha
c
linha
c
linha[5] == 'CE'
linha = row[0].split('\;') 
linha
c
linha[5]
linha[0]
linha = row[0].split('\;') #dividindo dados da linha
linha[0]
linha
c
t[1]
t[0]
t = row[0].split('\;')
row[0].split('\;')
row[0].split('/;')
row[0].split(',')
row[0].split
row[0].split(";")
row[0].split(';')
row[0]
row['cpf']
row[:cpf]
row
c
row[:cpf]
row.inspect
row.fetch(:cpf)
row
row["txNomeParlamentar;cpf;ideCadastro;nuCarteiraParlamentar;nuLegislatura;sgUF;sgPartido"]
row['cpf']
row[cpf]
row[1]
row["cpf"]
row["sgUF"]
row
c
@ano_importado_csv
c
Parlamentar.last
@ano_importado_csv
@ano_importado_csv.processar_csv
@ano_importado_csv
@ano_importado_csv.processado == true
@ano_importado_csv.save && @ano_importado_csv.processado == true
c
csv.each.first
csv
csv = CSV.parse(csv_file, headers: true)
csv = CSV.read(csv_file, headers: true)
csv = CSV.read(csv_file, headers: true, col_sep: ';', quote_char: '"', row_sep: '\n', encoding: 'UTF-8')
c
exit
csv_file.to_csv
csv_file.file_name
c
csv_file.present?
exit
csv
csv.each.first
csv = CSV.read(csv_text, headers: true)
csv = CSV.parse(csv_text.to_s, headers: true, col_sep: ";")
csv = CSV.parse(csv_text.strip, headers: true, col_sep: ";")
csv = CSV.parse(csv_text.strip, headers: true, col_sep: ';')
csv = CSV.parse(csv_text.strip, headers: true, col_sep: ";")
csv = CSV.parse(csv_text.strip, col_sep: ";")
csv = CSV.parse(csv_text.strip, col_sep: ";", headers: true)
csv = CSV.parse(csv_text.strip, :col_sep => ";", :headers => true)
csv = CSV.parse(csv_text, :col_sep => ";", :headers => true)
csv = CSV.parse(csv_text.to_s, :col_sep => ";", :headers => true)
csv = CSV.parse(csv_text.to_s, :headers => true)
csv = CSV.parse(csv_text, :headers => true)
csv_text
exit
self.arquivo.download
StringIO.new(self.arquivo.download)
csv_text
c
ano_importado_csv.arquivo
ano_importado_csv
c
ano_importado_csv.arquivo.original_filename
ano_importado_csv.arquivo.file_name
ano_importado_csv.arquivo.name
ano_importado_csv.arquivo.filename
ano_importado_csv.arquivo
ano_importado_csv
ano_importado_csv.arquivo
ano_importado_csv.arquivo.file
ano_importado_csv.arquivo
c
ano_importado_csv.arquivo.name
ano_importado_csv.arquivo.filename
ano_importado_csv.arquivo
ano_importado_csv.file
ano_importado_csv.arquivo.filename
ano_importado_csv.arquivo.name
ano_importado_csv.arquivo
ano_importado_csv.arquivo.filename
ano_importado_csv
